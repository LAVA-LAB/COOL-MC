//LLM:You are a self-driving car in a grid environment. Your first task is to transport a passenger from their pick-up location at (passenger location x-coordinate, passenger location y-coordinate) to their destination at (passenger destination x-coordinate, passenger destination y-coordinate). Additionally, you must monitor your fuel level and refuel at the gas station located at (x=1, y=2) whenever your fuel level is too low (each step fuel decreases by 1). At each step, you must choose exactly one action by outputting only its exact action name, written in the exact format as provided: UP (y+1), DOWN (y−1), RIGHT (x+1), LEFT (x−1), PICK_UP (pick up passenger at passenger location coordinate, sets passenger=1), or DROP (drop off passenger if passenger=1 and at destination). You can check whether the passenger is on board by evaluating passenger=0 (off board) or passenger=1 (on board).
mdp
const int MAX_JOBS;
const int MAX_FUEL;
//Red Location
const int red_x = 0;
const int red_y = 4;
//Yellow Location
const int yellow_x = 0;
const int yellow_y = 0;
//Green Location
const int green_x = 4;
const int green_y = 4;
//Blue Location
const int blue_x = 3;
const int blue_y = 0;
//Gas Station
const int gas_x = 1;
const int gas_y = 2;
//First Location
const int passenger_location_x=red_x;
const int passenger_location_y=red_y;
const int passenger_destination_x=yellow_x;
const int passenger_destination_y=yellow_y;
//At UP Border
formula UP_BORDER = (y=4);
formula NOT_UP_BORDER = (UP_BORDER=false);
//At East Border
formula EAST_BORDER = (x=4);
formula NOT_EAST_BORDER = (EAST_BORDER=false);
//At South Border
formula SOUTH_BORDER = (y=0);
formula NOT_SOUTH_BORDER = (SOUTH_BORDER=false);
//At West Border
formula WEST_BORDER = (x=0);
formula NOT_WEST_BORDER = (WEST_BORDER=false);
//At PICK_UP Location?
formula PICK_UP_LOCATION = (x=passenger_location_x) & (y=passenger_location_y);
formula NOT_PICK_UP_LOCATION = (PICK_UP_LOCATION = false);
//Passenger on board?
formula PASSENGER_ON_BOARD = (passenger = true);
formula NOT_PASSENGER_ON_BOARD = (PASSENGER_ON_BOARD = false);
//At DROP LOCATION Location?
formula DROP_LOCATION = (x=passenger_destination_x) & (y=passenger_destination_y);
formula NOT_DROP_LOCATION = (DROP_LOCATION = false);
//Done?
formula DONE = (jobs_done=MAX_JOBS) | (done=true);
formula NOT_DONE = (DONE = false);
//Fuel
formula OUT_OF_FUEL = (fuel=0);
formula NOT_OUT_OF_FUEL = (OUT_OF_FUEL = false);
//Gas Station
formula ON_GAS_STATION = (gas_x = x) & (gas_y = y);
formula NOT_ON_GAS_STATION = (ON_GAS_STATION = false);

module taxi
	//Location
	x : [0..4] init 2;
	y : [0..4] init 2;
	done : bool init false;
	fuel : [0..MAX_FUEL] init MAX_FUEL;
	//transportations
	jobs_done : [0..MAX_JOBS] init 0;
	//Passenger on board?
	passenger : bool init false;
	//Passenger Init Colored Location
	passenger_loc_x : [0..4] init passenger_location_x;
	passenger_loc_y : [0..4] init passenger_location_y;
	//Passenger Destination Colored Location
	passenger_dest_x : [0..4] init passenger_destination_x;
	passenger_dest_y : [0..4] init passenger_destination_y;
	//UP actions
	[UP] UP_BORDER & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION-> (y'=y) & (fuel'=fuel-1);
	[UP] NOT_UP_BORDER & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION-> (y'=y+1) & (fuel'=fuel-1);
	//EAST actions
	[RIGHT] EAST_BORDER & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION -> (x'=x) & (fuel'=fuel-1);
	[RIGHT] NOT_EAST_BORDER & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION -> (x'=x+1) & (fuel'=fuel-1);
	//SOUTH actions
	[DOWN] SOUTH_BORDER & NOT_DONE & NOT_OUT_OF_FUEL& NOT_ON_GAS_STATION-> (y'=y) & (fuel'=fuel-1);
	[DOWN] NOT_SOUTH_BORDER & NOT_DONE & NOT_OUT_OF_FUEL& NOT_ON_GAS_STATION-> (y'=y-1) & (fuel'=fuel-1);
	//WEST actions
	[LEFT] WEST_BORDER & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION-> (x'=x) & (fuel'=fuel-1);
	[LEFT] NOT_WEST_BORDER & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION-> (x'=x-1) & (fuel'=fuel-1);
	//PICK_UP actions
	[PICK_UP] PICK_UP_LOCATION & NOT_PASSENGER_ON_BOARD & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION -> (passenger'=true) & (fuel'=fuel-1);
	//DROP actions
	[DROP] DROP_LOCATION & PASSENGER_ON_BOARD & NOT_DONE & NOT_OUT_OF_FUEL & NOT_ON_GAS_STATION->  1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
						    	+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1) & (fuel'=fuel-1);

	[UP] OUT_OF_FUEL & NOT_ON_GAS_STATION-> (done'=true);
	[RIGHT] OUT_OF_FUEL & NOT_ON_GAS_STATION -> (done'=true);
	[DOWN] OUT_OF_FUEL & NOT_ON_GAS_STATION -> (done'=true);
	[LEFT] OUT_OF_FUEL & NOT_ON_GAS_STATION -> (done'=true);
	[PICK_UP] OUT_OF_FUEL & NOT_ON_GAS_STATION -> (done'=true);
	[DROP] OUT_OF_FUEL & NOT_ON_GAS_STATION-> (done'=true);

	//UP actions
	[UP] ON_GAS_STATION-> (y'=y+1) & (fuel'=MAX_FUEL);
	//EAST actions
	[RIGHT] ON_GAS_STATION -> (x'=x+1) & (fuel'=MAX_FUEL);
	//SOUTH actions
	[DOWN] ON_GAS_STATION-> (y'=y-1) & (fuel'=MAX_FUEL);
	//WEST actions
	[LEFT] ON_GAS_STATION-> (x'=x-1) & (fuel'=MAX_FUEL);

endmodule


rewards
	//Passenger arrived
	[DROP] DROP_LOCATION & PASSENGER_ON_BOARD : 0;
	//Pick up Passenger
	[PICK_UP] NOT_PASSENGER_ON_BOARD & PICK_UP_LOCATION : 21;
	//Life penality for each action if passenger is not on board
	[UP] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[RIGHT] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[DOWN] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[LEFT] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	//NOT ON BOARD BUT PICK UP AT WRONG LOCATION
	[PICK_UP] NOT_PASSENGER_ON_BOARD & NOT_PICK_UP_LOCATION: 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	//DROP NOT POSSIBLE BECAUSE NO PASSENGER
	[DROP] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	//Life penality for each action if passenger is on board
	[UP] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[RIGHT] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[DOWN] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[LEFT] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	//PASSENGER ALREADY PICKED UP
	[PICK_UP] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	//PASSENGER ON BOARD BUT NOT AT DROP LOCATION
	[DROP] NOT_DROP_LOCATION & PASSENGER_ON_BOARD: 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	//OUT OF FUEL
	[UP] OUT_OF_FUEL & NOT_ON_GAS_STATION & PASSENGER_ON_BOARD : 1500 - jobs_done*500 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[RIGHT] OUT_OF_FUEL & NOT_ON_GAS_STATION & PASSENGER_ON_BOARD : 1500 - jobs_done*500 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[DOWN] OUT_OF_FUEL & NOT_ON_GAS_STATION & PASSENGER_ON_BOARD : 1500 - jobs_done*500 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[LEFT] OUT_OF_FUEL & NOT_ON_GAS_STATION & PASSENGER_ON_BOARD: 1500 - jobs_done*500 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[PICK_UP] OUT_OF_FUEL & NOT_ON_GAS_STATION & PASSENGER_ON_BOARD: 1500 - jobs_done*500 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[DROP] OUT_OF_FUEL & NOT_ON_GAS_STATION & PASSENGER_ON_BOARD: 1500 - jobs_done*500 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[UP] OUT_OF_FUEL & NOT_ON_GAS_STATION & NOT_PASSENGER_ON_BOARD : 1500 - jobs_done*500 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[RIGHT] OUT_OF_FUEL & NOT_ON_GAS_STATION & NOT_PASSENGER_ON_BOARD : 1500 - jobs_done*500 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[DOWN] OUT_OF_FUEL & NOT_ON_GAS_STATION & NOT_PASSENGER_ON_BOARD : 1500 - jobs_done*500 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[LEFT] OUT_OF_FUEL & NOT_ON_GAS_STATION & NOT_PASSENGER_ON_BOARD: 1500 - jobs_done*500 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[PICK_UP] OUT_OF_FUEL & NOT_ON_GAS_STATION & NOT_PASSENGER_ON_BOARD: 1500 - jobs_done*500 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[DROP] OUT_OF_FUEL & NOT_ON_GAS_STATION & NOT_PASSENGER_ON_BOARD: 1500 - jobs_done*500 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
endrewards


label "empty" = (OUT_OF_FUEL & NOT_ON_GAS_STATION);

